#include <dir.h>

#include <fstream.h>
#include <iostream.h>

#include <stdlib.h>
#include <mem.h>
#include <graphics.h>
#include <conio.h>
#include <malloc.h>
#include <mouse.h>

//irrelevant things
int SHOWMOUSE=1; // 1 for yes 0 for no


// max things
const int MAXTABLES=5;
const int MAXBUTTONS=50;
const int MAXCOMBOS=10;

// mouse things
const int JUSTCLICKED=1;
const int NOTHING=0;

int _mousestatus=0;

const int rowwidth=15;
const int depth=4; // button 3d depth effect
const int tdepth=4; // table depth

struct objectlibrary;
class table;
class button;

struct objectlibrary
{
	int numtables,numbuttons,numcombos;
	table *tables[MAXTABLES];
	button *buttons[MAXBUTTONS];

	objectlibrary():numtables(0),numbuttons(0),numcombos(0){};
	~objectlibrary();
	void addtable(table *t);
	void addbutton(button *b);

	int checkall();  // returns index of button pressed if any

}objects;



class table
{
	//int index;
	char *value;
	int selected;
	int ROWS;
	int COLS;
	int x1,y1,x2,y2;
	int windowposx,windowposy;
	int visiblecolumns;
	int visiblerows;
	int colwidth;
	int maxsize;
	int justify;

	public:
	table(int xx, int yy, int c, int r,
			int visc, int visr, int cwidth, int max, int just);
	~table();

	void setvalue(int column, int row, unsigned int val);
	void setvalue(int column, int row, char* val);

	unsigned int getvalue(int column, int row);
	char *getcvalue(int column,int row);

	void setselectedvalue(unsigned int val);
	void setselectedvalue(char* val);
	unsigned int getselectedvalue();

	//int getindex(){return index;}

	void scrollup();
	void scrolldown();
	void scrollleft();
	void scrollright();

	void click(); // this needs mouse coords to speed up so no
										// recalculation of mouse coords
	void select(int col, int row);

	void draw();
	void drawvalue(int col,int row,int fcolor,int bcolor);
	void drawvalue(int col, int row);
	void drawselected();

	int mouseover();
};

class button
{
	int index;
	int x1,x2,y1,y2;
	char *caption;

	public:
	button(int i, int x, int y, int xwid, int ywid, char* cap):
		index(i),x1(x),y1(y)
	{
		x2=x1+xwid;
		y2=y1+ywid;
		caption=cap;
		objects.addbutton(this);
		drawup();
	}

	int mouseover(); // returns 1 if mouse is over
	void drawup();
	void drawdown();
	void click();
};



void mouse(); // sets all the mouse attributes gotten from mousestatus
void mousestatus(int &status); // status either JUSTRELEASED or 0

void setupgraphics();




objectlibrary::~objectlibrary()
{
	int loop;
	for(loop=0;loop<MAXBUTTONS;loop++)
		delete buttons[loop];
	for(loop=0;loop<MAXTABLES;loop++)
		delete tables[loop];
}

void objectlibrary::addtable(table *t)
{
	tables[numtables]=t;
	numtables++;
}

void objectlibrary::addbutton(button *b)
{
	buttons[numbuttons]=b;
	numbuttons++;
}


int objectlibrary::checkall()
{
	int loop,temp,clicked;
	mouse();
	mousestatus(clicked);
	if(clicked)
	{
		for(loop=0;loop<numbuttons;loop++)
		{
			if(buttons[loop]->mouseover())
			{
				if(SHOWMOUSE) hidemouse();
				buttons[loop]->click();
				if(SHOWMOUSE) showmouse();
				return loop;
			}
		}
		for(loop=0;loop<numtables;loop++)
		{
			if(tables[loop]->mouseover())
			{
				if(SHOWMOUSE) hidemouse();
				tables[loop]->click();
				if(SHOWMOUSE) showmouse();
				return -1;
			}
		}
	}
	return -1;
}

void mouse()
{
	_mousestatus=mouseclicked(0);
}

void mousestatus(int &status)
{
	status=_mousestatus;
}

void setupgraphics()
{

	int gdriver = DETECT, gmode;
	initgraph(&gdriver, &gmode, "egavga.bgi");
	setfillstyle(1,7);
	bar(0,0,640,480);
}


table::table(int xx, int yy, int c, int r,
			int visc, int visr, int cwidth, int max, int just):
			x1(xx),y1(yy),ROWS(r),COLS(c),
			colwidth(cwidth),visiblecolumns(visc),visiblerows(visr),
			maxsize(max),justify(just)
{
	if(visc>c) visiblecolumns=COLS;
	if(visr>r) visiblerows=ROWS;
	x2=x1+(colwidth*visiblecolumns);
	y2=y1+(rowwidth*visiblerows);

	value=(char*)malloc(ROWS*COLS*maxsize);
	memset(value,0,ROWS*COLS*maxsize);
	/*
	for(int loop=0;loop<ROWS*COLS;loop++)
	{
		value[loop]=(char*)malloc(maxsize);
		memset(value[loop],0,maxsize);
	}
	*/
	windowposx=windowposy=0;
	objects.addtable(this);
	draw();
	selected=0;
}

table::~table()
{
	/*
	for(int loop=0;loop<COLS*ROWS;loop++)
	{
		free(value[loop]);
	}
	*/
	free(value);
}


void table::setvalue(int column, int row, unsigned int val)
{
	if(row<ROWS && column<COLS)
	{
		itoa(val,&value[(COLS*row+column)*maxsize],10);
		drawvalue(column,row);
	}
	else
		cout << "Error: Reaching out of table limits\n";
}

void table::setvalue(int column, int row, char* val)
{
	if(row<ROWS && column<COLS)
	{
		memcpy(&value[(COLS*row+column)*maxsize],val,maxsize);
		drawvalue(column,row);
	}
	else
		cout << "Error: Reaching out of table limits\n";
}
unsigned int table::getvalue(int column, int row)
{
	if(row<ROWS && column<COLS)
		return atoi(&value[(COLS*row+column)*maxsize]);
	else
		cout << "Error: Reaching out of table limits\n";
	return 0;
}


char* table::getcvalue(int column, int row)
{
	if(row<ROWS && column< COLS)
		return &value[(row*COLS+column)*maxsize];
	else
	{
		cout << "Error: Reaching out of table limits\n";
		return 0;
	}
}

void table::setselectedvalue(unsigned int val)
{
	if(selected<ROWS*COLS)
	{
		itoa(val,&value[selected*maxsize],10);
		drawselected();
	}
	else
		cout << "Error: Reaching out of table limits\n";
}

void table::setselectedvalue(char* val)
{
	if(selected<ROWS*COLS)
	{
		memcpy(&value[selected*maxsize],val,maxsize);
		drawselected();
	}
	else
		cout << "Error: Reaching out of table limits\n";
}
unsigned int table::getselectedvalue()
{
	if(selected<ROWS*COLS)
		return atoi(&value[selected*maxsize]);
	else
		cout << "Error: Reaching out of table limits\n";
	return 0;
}


void table::scrollup()
{
	void far *bitmap=(void far*)farmalloc(visiblecolumns*visiblerows+10);
	if(windowposy>0)
	{
		windowposy--;
		getimage(x1,y1,x2,y2-rowwidth,bitmap);
		putimage(x1,y1+rowwidth,bitmap,0);
		for(int loop=windowposx;loop<windowposx+visiblecolumns;loop++)
			drawvalue(loop,windowposy-1);
	}
	farfree(bitmap);

}

void table::scrolldown()
{
	void far *bitmap=(void far*)farmalloc(visiblecolumns*visiblerows+10);
	if(windowposy+visiblerows<ROWS-1)
	{
		windowposy++;
		getimage(x1,y1+rowwidth,x2,y2,bitmap);
		putimage(x1,y1,bitmap,0);
		for(int loop=windowposx;loop<visiblecolumns+windowposx;loop++)
			drawvalue(loop,windowposy+visiblerows-1);
	}
	farfree(bitmap);
}

void table::scrollleft()
{
	void far *bitmap=(void far*)farmalloc(visiblecolumns*visiblerows+10);
	if(windowposx>0)
	{
		windowposx--;
		getimage(x1,y1,x2-colwidth,y2,bitmap);
		putimage(x1+colwidth,y1,bitmap,0);
		for(int loop=windowposy;loop<visiblerows+windowposy;loop++)
			drawvalue(windowposx,loop);
	}
	farfree(bitmap);
}

void table::scrollright()
{
	void far *bitmap=(void far*)farmalloc(visiblecolumns*visiblerows+10);
	if(windowposx+visiblecolumns<COLS-1)
	{
		getimage(x1+colwidth,y1,x2,y2,bitmap);
		putimage(x1,y1,bitmap,0);
		for(int loop=windowposy;loop<visiblerows+windowposy;loop++)
			drawvalue(windowposx+visiblecolumns-1,loop);
		windowposx++;
		//draw();
	}
	farfree(bitmap);
}


void table::draw()
{
	setcolor(8);
	int i;
	for(i=1;i<tdepth;i++)
	{
		line(x1-i,y1-i,x1-i,y2+i);
		line(x1-i,y1-i,x2+i,y1-i);
	}
	setcolor(15);
	for(i=1;i<tdepth;i++)
	{
		line(x2+i,y2+i,x1-i,y2+i);
		line(x2+i,y2+i,x2+i,y1-i);
	}
	setcolor(0);
	line(x1-tdepth,y1-tdepth,x1,y1);
	line(x2+tdepth,y1-tdepth,x2,y1);
	line(x1-tdepth,y2+tdepth,x1,y2);
	line(x2+tdepth,y2+tdepth,x2,y2);
	rectangle(x1-tdepth,y1-tdepth,x2+tdepth,y2+tdepth);

	setfillstyle(1,15);
	bar(x1,y1,x2,y2);
	setcolor(0);
	int xpos=x1,ypos=y1;
	for(int loop=0;loop<=visiblecolumns;loop++)
	{
		line(xpos,y1,xpos,y2);
		xpos+=colwidth;
	}
	for(loop=0;loop<=visiblerows;loop++)
	{
		line(x1,ypos,x2,ypos);
		ypos+=rowwidth;
	}

	int x,y;
	settextjustify(justify,BOTTOM_TEXT);
	setcolor(0);
	for(int row=windowposy;row<windowposy+visiblerows;row++)
		for(int col=windowposx;col<windowposx+visiblecolumns;col++)
		{
			x=x1+(col-windowposx+1)*colwidth;
			y=y1+(row-windowposy+1)*rowwidth;
			outtextxy(x,y,getcvalue(col,row));
		}
	int srow,scol;
	srow=selected/COLS;
	scol=selected%COLS;
	drawvalue(scol,srow,15,4);
}

void table::drawvalue(int col, int row, int fcolor, int bcolor)
{
	if(row>=windowposy && row<=windowposy+visiblerows &&
		col>=windowposx && col<=windowposx+visiblecolumns)
	{
		settextjustify(justify,BOTTOM_TEXT);
		int x,y;
		x=x1+(col-windowposx)*colwidth;
		y=y1+(row-windowposy)*rowwidth;
		setfillstyle(1,bcolor);
		bar(x+1,y+1,x+colwidth-1,y+rowwidth-1);
		switch(justify)
		{
			case(RIGHT_TEXT):	x=x1+(col-windowposx+1)*colwidth;
									y=y1+(row-windowposy+1)*rowwidth;
									break;
			case(LEFT_TEXT):	x=x1+(col-windowposx)*colwidth+3;
									y=y1+(row-windowposy+1)*rowwidth-3;
									break;

		}

		setcolor(fcolor);
		outtextxy(x,y,getcvalue(col,row));
	}
}

void table::drawvalue(int col, int row)
{
	if(selected==(row*COLS+col))
		drawvalue(col,row,15,4);
	else
		drawvalue(col,row,0,15);
}

void table::drawselected()
{
	drawvalue(selected%COLS,selected/COLS,15,4);
}

int table::mouseover()
{
	int temp,x,y;
	x=readmousex();
	y=readmousey();
	mousestatus(temp);
	return (x>=x1 && x<=x2 && y>=y1 && y<=y2);
}

void table::click()
{
	int x,y,col,row;
	x=readmousex();
	y=readmousey();
	col=x-x1;
	row=y-y1;
	col/=colwidth;
	row/=rowwidth;
	select(col+windowposx,row+windowposy);
}

void table::select(int col, int row)
{
	int srow, scol;
	int x,y;
	char v[6];
	srow=selected/COLS;
	scol=selected%COLS;

	drawvalue(scol,srow,0,15);
	srow=row;
	scol=col;
	selected=srow*COLS+scol;

	drawvalue(scol,srow,15,4);
}





int button::mouseover()
{
	int temp,x,y;
	x=readmousex();
	y=readmousey();
	mousestatus(temp);
	return (x>=x1 && x<=x2 && y>=y1 && y<=y2);
}

void button::click()
{
	drawdown();
	delay(50);
	drawup();
}

void button::drawup()
{
	int ywidth=y2-y1;
	int xwidth=x2-x1;
	setfillstyle(1,7);
	bar(x1,y1,x2,y2);
	setcolor(16);
	rectangle(x1+depth,y1+depth,x2-depth,y2-depth);
	line(x1,y1,x1+depth,y1+depth);
	line(x2,y2,x2-depth,y2-depth);
	line(x1,y2,x1+depth,y2-depth);
	line(x2,y1,x2-depth,y1+depth);
	rectangle(x1-1,y1-1,x2+1,y2+1);
	setfillstyle(1,8);
	floodfill(x1+depth/2,y1+ywidth,0);
	floodfill(x1+xwidth,y1+depth/2,0);
	setfillstyle(1,15);
	floodfill(x2-depth/2,y2-ywidth,0);
	floodfill(x2-xwidth,y2-depth/2,0);
	setfillstyle(1,7);
	floodfill(x1+xwidth/2,y1+ywidth/2,0);
	setcolor(15);
	settextjustify(1,1);
	outtextxy(x1+xwidth/2,y1+ywidth/2,caption);
	setcolor(16);
	outtextxy(x1+xwidth/2+1,y1+ywidth/2+1,caption);

	setcolor(16);
	//rectangle(x1,y1,x2,y2);
}


void button::drawdown()
{
	int ywidth=y2-y1;
	int xwidth=x2-x1;

	setfillstyle(1,7);
	bar(x1,y1,x2,y2);
	setcolor(16);
	rectangle(x1+depth,y1+depth,x2-depth,y2-depth);
	line(x1,y1,x1+depth,y1+depth);
	line(x2,y2,x2-depth,y2-depth);
	line(x1,y2,x1+depth,y2-depth);
	line(x2,y1,x2-depth,y1+depth);
	rectangle(x1-1,y1-1,x2+1,y2+1);
	setfillstyle(1,15);
	floodfill(x1+depth/2,y1+ywidth,0);
	floodfill(x1+xwidth,y1+depth/2,0);
	setfillstyle(1,8);
	floodfill(x2-depth/2,y2-ywidth,0);
	floodfill(x2-xwidth,y2-depth/2,0);
	setfillstyle(1,7);
	floodfill(x1+xwidth/2,y1+ywidth/2,0);
	setcolor(15);
	settextjustify(1,1);
	outtextxy(x1+xwidth/2+3,y1+ywidth/2+2,caption);
	setcolor(16);
	outtextxy(x1+xwidth/2+3+1,y1+ywidth/2+2+1,caption);
	//setcolor(7);
	//rectangle(x1,y1,x2,y2);

}





void load(table &t)
{
	ifstream in("load.txt");
	char v[50];
	for(int loop=0;!in.eof();loop++)
	{
		in.getline(v,49);
		t.setvalue(0,loop,v);
	}
	in.close();
}






void main()
{
	chdir("c:\\cpp\\bgibuttn");
	setupgraphics();
	initmouse();
	if(SHOWMOUSE) showmouse();
	button b(0,0,0,70,70,"inc");
	button b1(1,100,100,100,50,"Exit");
	button b2(2,400,400,200,50,"Scroll");
	table t(150,150,7,40,4,20,40,7,RIGHT_TEXT);
	table t2(0,150,1,40,1,20,150-(tdepth)*2,40,LEFT_TEXT);
	load(t2);

	int status=-1;
	while(status!=1)
	{
		status=objects.checkall();
		switch(status)
		{
			case(0):	t.setselectedvalue(t.getselectedvalue()+1);
						break;
			case(2):	t.scrollright();

		}
	}
	closegraph();

}