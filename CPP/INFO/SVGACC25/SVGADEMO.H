/****************************************************************************
     
      'SVGACC' A Super Vga Graphics Library for use with Microsoft and
      Borland C/C++
      Copyright 1993-1996 by Stephen L. Balkum and Daniel A. Sill

    **************** UNREGISTERD SHAREWARE VERSION ***********************
    * FOR EVUALATION ONLY. NOT FOR RESALE IN ANY FORM. SOFTWARE WRITTEN  *
    * USING THIS UNREGISTERED SHAREWARE GRAPHICS LIBRARY MAY NOT BY SOLD *
    * OR USED FOR ANY PURPOSE OTHER THAN THE EVUALTION OF THIS LIBRARY.  *
    **********************************************************************

    **************** NO WARRANTIES AND NO LIABILITY **********************
    * Stephen L. Balkum and Daniel A. Sill provide no warranties, either *
    * expressed or implied, of merchantability, or fitness, for a        *
    * particular use or purpose of this SOFTWARE and documentation.      *
    * In no event shall Stephen L. Balkum or Daniel A. Sill be held      *
    * liable for any damages resulting from the use or misuse of the     * 
    * SOFTWARE and documentation.                                        *
    **********************************************************************

    ************** U.S. GOVERNMENT RESTRICTED RIGHTS *********************
    * Use, duplication, or disclosure of the SOFTWARE and documentation  *
    * by the U.S. Government is subject to the restictions as set forth  *
    * in subparagraph (c)(1)(ii) of the Rights in Technical Data and     *
    * Computer Software cluse at DFARS 252.227-7013.                     *
    * Contractor/manufacturer is Stephen L. Balkum and Daniel A. Sill,   *
    * P.O. Box 7704, Austin, Texas 78713-7704                            *
    **********************************************************************

    **********************************************************************
    * By using this SOFTWARE or documentation, you agree to the above    *
    * terms and conditions.                                              *
    **********************************************************************

 ***************************************************************************/

#define TITLEN 85

#ifdef MODULE

extern endit;
extern PaletteData orgpal, pal, pal2;
extern MouseCursor magmousecursor;
extern MouseCursor bigmousecursor;
extern MouseCursor stwmousecursor;
extern int gamma[];
extern byte spritedata[];
extern char getkey(void);
extern void beep(void);

#else

int endit;
PaletteData orgpal, pal, pal2;

char getkey(void);
void doall(void);
void screenclear(void);
void screengoto(int x, int y);
void beep(void);
extern char doblock(void);
extern char doclip(void);
extern char dofill(void);
extern char dopal(void);
extern char doprims(void);
extern char doprims(void);
extern char doscroll(void);
extern char dotext(void);
extern char do2d(void);
extern char do3d(void);
extern char domouse(void);
extern char dojoystick(void);
extern char dopcx(void);


/*MAGNIFIER MOUSE CURSOR DATA*/
MouseCursor magmousecursor = {
    {7},{6},
    {255,255,255,255,255,7,7,7,7,255,255,255,255,255,255,255,
    255,255,255,7,7,255,255,255,255,7,7,255,255,255,255,255,
    255,255,7,255,255,255,255,255,255,255,255,7,255,255,255,255,
    255,7,255,255,255,255,255,255,255,255,255,255,7,255,255,255,
    255,7,255,255,255,255,255,255,255,255,255,255,7,255,255,255,
    7,255,255,255,255,255,255,255,255,255,255,255,255,7,255,255,
    7,255,255,255,255,255,255,255,255,255,255,255,255,7,255,255,
    7,255,255,255,255,255,255,255,255,255,255,255,255,7,255,255,
    7,255,255,255,255,255,255,255,255,255,255,255,255,7,255,255,
    255,7,255,255,255,255,255,255,255,255,255,255,7,255,255,255,
    255,7,255,255,255,255,255,255,255,255,255,255,7,255,255,255,
    255,7,7,255,255,255,255,255,255,255,255,7,7,255,255,255,
    255,255,7,7,7,255,255,255,255,7,7,7,255,255,255,255,
    255,255,255,7,7,7,7,7,7,8,8,255,255,255,255,255,
    255,255,255,255,255,7,7,7,7,7,8,8,255,255,255,255,
    255,255,255,255,255,255,255,255,255,7,8,8,255,255,255,255,
    255,255,255,255,255,255,255,255,255,255,7,8,8,255,255,255,
    255,255,255,255,255,255,255,255,255,255,7,8,8,255,255,255,
    255,255,255,255,255,255,255,255,255,255,255,7,8,8,255,255,
    255,255,255,255,255,255,255,255,255,255,255,7,8,8,255,255,
    255,255,255,255,255,255,255,255,255,255,255,255,7,8,8,255,
    255,255,255,255,255,255,255,255,255,255,255,255,7,8,8,255,
    255,255,255,255,255,255,255,255,255,255,255,255,255,7,8,8,
    255,255,255,255,255,255,255,255,255,255,255,255,255,7,7,7}
};


/*BIG ARROW MOUSE CURSOR DATA*/
MouseCursor bigmousecursor = {
    {1},{1},
    {0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,
    0,15,15,0,0,255,255,255,255,255,255,255,255,255,255,255,
    0,15,15,15,15,0,0,0,255,255,255,255,255,255,255,255,
    0,15,15,15,15,15,15,15,0,0,255,255,255,255,255,255,
    0,15,15,15,15,15,15,15,15,15,0,0,0,255,255,255,
    0,15,15,15,15,15,15,15,15,15,15,15,15,0,0,255,
    0,15,15,15,15,15,15,15,15,15,15,15,15,15,0,255,
    0,15,15,15,15,15,15,15,15,15,15,15,0,0,255,255,
    0,15,15,15,15,15,15,15,15,15,15,0,255,255,255,255,
    0,15,15,15,15,15,15,15,15,0,0,255,255,255,255,255,
    0,15,15,15,15,15,15,15,15,0,255,255,255,255,255,255,
    0,15,15,15,15,15,0,15,15,15,0,255,255,255,255,255,
    0,15,15,15,15,0,0,15,15,15,0,255,255,255,255,255,
    0,15,15,0,0,255,255,0,15,15,15,0,255,255,255,255,
    0,15,0,255,255,255,255,0,15,15,15,0,255,255,255,255,
    0,0,255,255,255,255,255,255,0,15,15,15,0,255,255,255,
    255,255,255,255,255,255,255,255,255,0,15,15,15,0,255,255,
    255,255,255,255,255,255,255,255,255,0,15,15,15,0,255,255,
    255,255,255,255,255,255,255,255,255,255,0,15,15,15,0,255,
    255,255,255,255,255,255,255,255,255,255,255,0,15,15,15,0,
    255,255,255,255,255,255,255,255,255,255,255,0,15,15,15,0,
    255,255,255,255,255,255,255,255,255,255,255,255,0,15,15,0,
    255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255}
};

/*STOP WATCH MOUSE CURSOR DATA*/
MouseCursor stwmousecursor = {
    {8},{11},
    {255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,15,15,15,15,255,255,255,255,255,255,
    255,255,255,255,255,255,15,15,15,15,255,255,255,255,255,255,
    255,255,255,255,255,255,255,15,15,255,255,255,255,255,255,255,
    255,255,255,255,255,255,15,15,15,15,255,255,255,255,255,255,
    255,255,255,255,15,15,15,7,7,15,15,15,255,255,255,255,
    255,255,255,15,15,7,7,7,7,7,7,15,15,255,255,255,
    255,255,15,15,7,7,7,7,7,7,7,7,15,15,255,255,
    255,15,15,7,0,7,7,7,7,7,7,7,7,15,15,255,
    255,15,7,7,7,0,7,7,7,7,7,7,7,7,15,255,
    15,15,7,7,7,7,0,7,7,7,0,0,7,7,15,15,
    15,7,7,7,7,7,7,0,0,0,7,7,7,7,7,15,
    15,7,7,7,7,7,7,0,0,7,7,7,7,7,7,15,
    15,15,7,7,7,7,7,7,7,7,7,7,7,7,15,15,
    255,15,7,7,7,7,7,7,7,7,7,7,7,7,15,255,
    255,15,15,7,7,7,7,7,7,7,7,7,7,15,15,255,
    255,255,15,15,7,7,7,7,7,7,7,7,15,15,255,255,
    255,255,255,15,15,7,7,7,7,7,7,15,15,255,255,255,
    255,255,255,255,15,15,15,7,7,15,15,15,255,255,255,255,
    255,255,255,255,255,255,15,15,15,15,255,255,255,255,255,255,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255}
};

/*GAMMA CORRECTION TABLE FOR DRWALINE (ANTIALIASED LINES)*/
int gamma[64] = {
    63,63,62,62,61,61,60,60,59,59,58,58,57,57,56,56,
    55,55,54,54,53,53,52,52,51,51,50,49,49,48,48,47,
    46,46,45,44,44,43,42,41,41,40,39,38,37,37,36,35,
    34,33,32,31,29,28,27,26,24,23,21,19,17,14,10,0
};


#endif
