#include<iostream.h>
//#include<stdlib.h>
#include<conio.h>
#include<fstream.h>
#include<ctype.h>


const char* version="1.0";
const float taxes=.1925;
const char* days[15]={	"Friday\t","Saturday","Sunday\t","Monday\t","Tuesday\t",
						"Wednesday","Thursday","Friday\t","Saturday",
						"Sunday\t","Monday\t","Tuesday\t","Wednesday","Thursday"};


void any_key()
{
	cout << "\n<Press any key to continue>\n";
	getch();
}



struct time
{
	int hour;
	int min;
	void check();

	float toreal();

	time set(int,int);
	void get(int&,int&);
	time(int,int);
	time();

	time operator += (time);
	time operator -= (time);
};

inline time operator + (time a,time b) {return a+=b;}
inline time operator - (time a,time b) {return a-=b;}
ostream &operator << (ostream&,time);
istream &operator >> (ostream&,time&);


float time::toreal()
{
	return ((min/60.0)+hour);
}

time::time(int h, int m)
{
	min=m;
	hour=h;
}

time::time()
{
	min=0;
	hour=0;
}

time time::set(int h, int m)
{
	hour=h;
	min=m;
	check();
	return *this;
}

void time::check()
{
	while(min>=60)
	{
		hour+=1;
		min-=60;
	}
	while(min<0)
	{
		hour-=1;
		min+=60;
	}
}


void time::get(int &h, int& m)
{
	h=hour;
	m=min;
}

time time::operator += (time t)
{
	hour+=t.hour;
	min+=t.min;
	check();
	return *this;
}


time time::operator -= (time t)
{
	hour-=t.hour;
	min-=t.min;
	check();
	return *this;
}




ostream& operator << (ostream& out, time t)
{
	int h,m;
	t.get(h,m);
	out << h << ':';
	if(m<10) out << '0';
	out << m;
	return out;
}

istream& operator >> (istream& in, time &t)
{
	int h,m,x,y;
	x=wherex();
	y=wherey();
	in >> h;
	gotoxy(x+2,y);
	cout << ':';
	in >> m;
	t.set(h,m);
	return in;
}

int operator > (time a, time b)
{
	if(a.hour>b.hour) return 1;
	if(a.hour==b.hour)
		if(a.min>b.min) return 1;
	return 0;
}

int operator < (time a, time b)
{
	return b>a;
}



struct shift
{
	time in,out;
	int day;
	shift();
	shift(time,time);
	time total();
	ostream& print(ostream&);
};

inline ostream& operator << (ostream& o,shift s) {return s.print(o);}

ostream& shift::print(ostream& o)
{
	if(day>6) o << "Week 2\t";
	else o << "Week 1\t";
	o << days[day] << '\t';
	o << in << " - " << out;
	return o;
}

shift::shift():in(0,0),out(0,0)
{
}

shift::shift(time i, time o):in(i),out(o)
{
}

time shift::total()
{
	return out-in;
}


struct payperiod
{
	shift work[30];
	float rate;
	int size;
	payperiod();
	ofstream& save(ofstream&);
	ifstream& load(ifstream&);
	payperiod input(istream&);
	payperiod add(istream&);
	float hours_worked();
	float money_made();
	float after_taxes();
	void sort();
	ostream& display(ostream&);
	void totext();
	void clear();
	void remove(int);
};

void payperiod::remove(int i)
{
	for(i;i<size-1;i++)
		work[i]=work[i+1];
	size--;
}

void payperiod::clear()
{
	size=0;
}


void payperiod::totext()
{
	sort();
	ofstream out;
	char* file="                            ";
	char* date="                            ";
	cout << "Enter first date of payperiod :";
	cin >> date;
	cout << "Filename: ";
	cin >> file;
	out.open(file);
	out << "Hours worked and total pay for " << date << endl << "Generated by Whoa! Productions's Paycheck Calculator" << endl;
	display(out);
	out << endl << "Total Hours Worked: " << hours_worked()
		<< "\nTotal Pay at " << rate << " per hour: " << money_made()
		<< "\nEstimated Net: " << after_taxes();
	out.close();
}

ostream& payperiod::display(ostream& out)
{
	sort();
	for(int i=0;i<size;i++)
		out << endl << i << ". " << work[i];
		//if(i==6) any_key();
	return out;
}
int operator > (shift a,shift b)
{
	if(a.day>b.day) return 1;
	if(a.day==b.day)
		if(a.in>b.in) return 1;
	return 0;
}

int operator < (shift a, shift b)
{
	return b>a;
}


void payperiod::sort()
{
	shift temp;
	for(int i=0;i<size-1;i++)
		for(int j=i+1;j<size;j++)
			if(work[i]>work[j])
			{
				temp=work[j];
				work[j]=work[i];
				work[i]=temp;
			}
}


payperiod::payperiod():size(0),rate(5.15)
{
}

float payperiod::hours_worked()
{
	float t=0;
	for(int i=0;i<size;i++)
		t+=work[i].total().toreal();
	return t;
}

float payperiod::money_made()
{
	return rate*hours_worked();
}

float payperiod::after_taxes()
{
	return money_made()-(money_made()*taxes);
}


ofstream& payperiod::save(ofstream& out)
{
	sort();
	int h,m,d;
	out << size << endl << rate << endl;
	for(int i=0;i<size;i++)
	{
		d=work[i].day;
		out << d << endl;
		work[i].in.get(h,m);
		out << h << endl << m << endl;
		work[i].out.get(h,m);
		out << h << endl << m << endl;
	}
	return out;
}

ifstream& payperiod::load(ifstream& in)
{
	int h,m;
	in >> size;
	in >> rate;
	for(int i=0;i<size;i++)
	{
		in >> work[i].day;
		in >> h >> m;
		work[i].in.set(h,m);
		in >> h >> m;
		work[i].out.set(h,m);
	}
	return in;
}

void showdays()
{
	int i;
	for(i=0;i<7;i++)
		cout << i << " = " << days[i] << endl;
}


payperiod payperiod::input(istream& in)
{
	int week;
	cout << "Week?: ";
	in >> week;
	week--;
	showdays();
	cout << "Day? : ";
	in >> work[size].day;
	work[size].day+=(week*7);
	cout << "punch in : ";
	in >> work[size].in;
	cout << "punch out: ";
	in >> work[size].out;
	return *this;
}

payperiod payperiod::add(istream& in)
{
	input(in);
	size++;
	return *this;
}



char menu(payperiod p)
{
	clrscr();
	cout << 	"Whoa! Productions' Paycheck calculator " << version;
	cout << 	"\n\n(L)oad from file\n"<<
				"(S)ave to file\n"<<
				"(A)dd shift\n"<<
				"(R)emove shift\n" <<
				"(D)isplay all shifts\n"<<
				"(E)xport to text\n"<<
				"(C)lear payperiod\n" <<
				"set (W)age\n" <<
				"e(X)it" <<
				"\n\nCurrent Hourly Wage: $" << p.rate <<
				"\nCurent Hours Worked: " << p.hours_worked() <<
				"\nCurrent Paycheck Gross: $" << p.money_made() <<
				"\nExtimated Paycheck Net: $" << p.after_taxes() <<
				"\n\nSelection(L,S,A,R,D,E,C,W,X): ";
	return toupper(getch());
}



void save(payperiod &p)
{
	char* file="                  ";
	cout << "Save file\nEnter Filename : ";
	cin >> file;
	ofstream out;
	out.open(file);
	p.save(out);
	out.close();
}

void load(payperiod &p)
{
	char* file="                 ";
	cout << "Load file\nEnter Filename : ";
	cin >> file;
	ifstream in;
	in.open(file);
	p.load(in);
	in.close();
}

void remove(payperiod &p)
{
	int i;
	cout << "\nEnter index of shift to remove: ";
	cin >> i;
	if(i<0 || i>=p.size)
	{	cout << "Invalid index\n"; return;}
	p.remove(i);
}




void main()
{
	payperiod p;
	char choice;
	clrscr();
	do
	{
		choice=menu(p);
		cout << "\n\n";
		switch(choice)
		{
			case('S'):  save(p);
							break;
			case('L'):  load(p);
							break;
			case('A'):  clrscr();
							cout << "Add a Shift\n";
							p.add(cin);
							break;
			case('R'):  p.display(cout);
							remove(p);
							break;
			case('D'):	p.display(cout);
							break;
			case('C'):  cout << "\nClear all values? Y/N";
							do
							{
								choice=toupper(getch());
								if(choice=='Y') p.clear();
							}while(choice!='Y'&& choice!='N');
							break;
			case('W'):	cout << "Enter new hourly wage: $";
							cin >> p.rate;
							break;
			case('E'):  p.totext();
							break;
			case('X'): 	cout << endl << "Thank you for choosing Whoa! Productions\n";
			default:    break;
		}
		any_key();
	}
	while(choice!='X');
}






